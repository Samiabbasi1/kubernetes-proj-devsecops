pipeline {
    agent any
    tools {
        nodejs 'nodejs'
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
        DOCKER_HUB_CREDENTIALS = 'docker_hub'
        DOCKER_HUB_REPO = 'newrepo2'
        IMAGE_TAG = 'latest'
    }
    stages {
        stage('cleaning workspace') {
            steps {
                cleanWs()
            }
        }
        stage('checkout from git') {
            steps {
                git credentialsId: 'github_token', url: 'https://github.com/Samiabbasi1/kubernetes-proj-devsecops.git', branch: 'main'
    
            }
        }
        stage('sonarqube analysis') {
            steps {
                dir('appcode/backend') {
                    withSonarQubeEnv('sonar-server') {
                        sh '''
                            $SCANNER_HOME/bin/sonar-scanner \
                            -Dsonar.projectKey=backend \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=http://localhost:9000 \
                            -Dsonar.login=squ_544b9b23459b88818b66f454c2c3146b4a904690

                        '''
                    }
                }
            }
        }
        // stage('quality check') {
        //     steps {
        //         script {
        //             def qualityGate = waitForQualityGate abortPipeline: false, credentialsId: 'sonar_token'
        //             if (qualityGate.status != 'OK') {
        //                 error "SonarQube quality gate failed: ${qualityGate.status}"
        //             }
        //         }
        //     }
        // }
        stage('owasp dependency check') {
            steps {
                dir('appcode/backend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }
        stage('docker image build') {
            steps {
                script {
                    dir('appcode/backend') {
                        sh 'docker build -t abdulsami1/${DOCKER_HUB_REPO}:${BUILD_NUMBER} .'
                    }
                }
            }
        }
        stage('image pushing to dockerhub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker_hub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                        sh 'docker push abdulsami1/${DOCKER_HUB_REPO}:${BUILD_NUMBER}'
                    }
                }
            }
        }
        stage('trivy image scan') {
            steps {
                sh 'trivy image abdulsami1/newrepo2:${BUILD_NUMBER} > trivyimage.txt'
            }
        }
        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "kubernetes-proj-devsecops"
                GIT_USER_NAME = "Samiabbasi1"
            }
            steps {
                dir('k8s-manifests-file/backend') {
                    withCredentials([string(credentialsId: 'github_token', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                            git config user.email "abdulsamiabbasi1@gmail.com"
                            git config user.name "Samiabbasi1"
                            BUILD_NUMBER=${BUILD_NUMBER}
                            echo $BUILD_NUMBER
                            imageTag=$(grep -oP '(?<=image: abdulsami1/newrepo2:)[^ ]+' deployment.yaml)
                            echo $imageTag
                            sed -i "s|abdulsami1/newrepo2:${imageTag}|abdulsami1/newrepo2:${BUILD_NUMBER}|g" deployment.yaml
                            git add deployment.yaml
                            git commit -m "Update deployment Image to version \${BUILD_NUMBER}"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                }
            }
        }
    }
}
